<?php

namespace PostsBundle\Repository;

use Doctrine\ORM\Tools\Pagination\Paginator;
use Doctrine\ORM\Query\Expr;
use PostsBundle\Entity\Post;
use PostsBundle\Entity\Subject;

/**
 * PostRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PostRepository extends \Doctrine\ORM\EntityRepository
{
    public function findAllByPage($currentPage = 1, $limit = 10)
    {
        $query = $this->createQueryBuilder('post')
            ->select('post')
            ->setFirstResult($limit * ($currentPage - 1))
            ->setMaxResults($limit)
            ->orderBy('post.id', 'DESC')
            ->getQuery();

        return new Paginator($query, $fetchJoinCollection = false);
    }

    public function findBySubj($subject = "subj", $currentPage = 1, $limit = 10)
    {
        $query = $this->createQueryBuilder('post')
            ->select('post')
            ->join(Subject::class, 'subject', Expr\Join::WITH, 'post.subject = subject.id')
            ->where('subject.subjName = :subjName')
            ->setParameter('subjName',$subject)
            ->setFirstResult($limit * ($currentPage - 1))
            ->setMaxResults($limit)
            ->orderBy('post.id', 'DESC')
            ->getQuery();
        return new Paginator($query, $fetchJoinCollection = false);
    }


    /**
     * @return mixed
     */
    public function getTotal()
    {
        return $this->createQueryBuilder('post')->select('COUNT(post)')
            ->getQuery()
            ->getSingleScalarResult();


    }

    /**
     * @param $subject
     * @return mixed
     */
    public function getTotalBySubj($subject)
    {
        return $this->createQueryBuilder('post')
            ->select('COUNT(post)')
            ->join(Subject::class, 'subject', Expr\Join::WITH, 'post.subject = subject.id')
            ->where('subject.subjName = :subjName')
            ->setParameter('subjName',$subject)
            ->getQuery()
            ->getSingleScalarResult();
    }

}
